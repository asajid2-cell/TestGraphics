from __future__ import annotations

import argparse
import subprocess
import sys
from pathlib import Path
import tkinter as tk
from tkinter import ttk, filedialog, messagebox

try:
    # Normal package-relative import
    from .io import PartRegistry, load_combos
except Exception:
    # Fallback if user ran this file directly from inside the package folder
    import sys
    from pathlib import Path as _P
    pkg_root = str(_P(__file__).resolve().parents[1])
    if pkg_root not in sys.path:
        sys.path.append(pkg_root)
    from beyblade_sim.io import PartRegistry, load_combos


class ControlPanel(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("MFL Simulator â€” Control Panel")
        self.geometry("760x520")

        self.parts_path = tk.StringVar(value=str(Path("data/parts.json")))
        self.combos_path = tk.StringVar(value=str(Path("data/combos.json")))
        self.preset = tk.StringVar(value="default")
        self.preset_json = tk.StringVar(value="")
        self.combo1 = tk.StringVar()
        self.combo2 = tk.StringVar()
        self.no_ko = tk.BooleanVar(value=False)
        self.charge_launch = tk.BooleanVar(value=False)
        self.fps = tk.StringVar(value="60")
        self.size = tk.StringVar(value="900x700")
        self.seed = tk.StringVar(value="")
        self.speed_boost = tk.StringVar(value="")
        self.trail_length = tk.StringVar(value="150")
        self.bey_size_scale = tk.StringVar(value="0.8")
        self.mode = tk.StringVar(value="2D")  # 2D or 3D

        self._build_ui()
        self._load_combos()

    def _build_ui(self):
        frm = ttk.Frame(self, padding=10)
        frm.pack(fill=tk.BOTH, expand=True)

        # Paths
        row = 0
        ttk.Label(frm, text="Parts JSON:").grid(row=row, column=0, sticky="e")
        ttk.Entry(frm, textvariable=self.parts_path, width=60).grid(row=row, column=1, sticky="we")
        ttk.Button(frm, text="...", command=self._pick_parts).grid(row=row, column=2)
        row += 1
        ttk.Label(frm, text="Combos JSON:").grid(row=row, column=0, sticky="e")
        ttk.Entry(frm, textvariable=self.combos_path, width=60).grid(row=row, column=1, sticky="we")
        ttk.Button(frm, text="...", command=self._pick_combos).grid(row=row, column=2)
        row += 1
        ttk.Label(frm, text="Preset JSON (advanced):").grid(row=row, column=0, sticky="e")
        ttk.Entry(frm, textvariable=self.preset_json, width=60).grid(row=row, column=1, sticky="we")
        ttk.Button(frm, text="...", command=self._pick_preset).grid(row=row, column=2)
        row += 1

        # Combos
        ttk.Label(frm, text="Combo A:").grid(row=row, column=0, sticky="e")
        self.combo1_box = ttk.Combobox(frm, textvariable=self.combo1, width=40)
        self.combo1_box.grid(row=row, column=1, sticky="w")
        row += 1
        ttk.Label(frm, text="Combo B:").grid(row=row, column=0, sticky="e")
        self.combo2_box = ttk.Combobox(frm, textvariable=self.combo2, width=40)
        self.combo2_box.grid(row=row, column=1, sticky="w")
        row += 1

        # Toggles
        ttk.Checkbutton(frm, text="No KO (stamina only)", variable=self.no_ko).grid(row=row, column=1, sticky="w")
        ttk.Checkbutton(frm, text="Charge launch (hold 'L')", variable=self.charge_launch).grid(row=row, column=1, sticky="e")
        row += 1

        # Preset & mode
        ttk.Label(frm, text="Preset:").grid(row=row, column=0, sticky="e")
        ttk.Combobox(frm, textvariable=self.preset, values=["default", "stamina-2min", "stamina-long", "stamina-extreme"], width=20).grid(row=row, column=1, sticky="w")
        ttk.Label(frm, text="Mode:").grid(row=row, column=2, sticky="e")
        ttk.Combobox(frm, textvariable=self.mode, values=["2D", "3D"], width=8).grid(row=row, column=3, sticky="w")
        row += 1

        # Numeric
        grid2 = ttk.Frame(frm)
        grid2.grid(row=row, column=0, columnspan=4, sticky="we", pady=(8, 0))
        ttk.Label(grid2, text="FPS:").grid(row=0, column=0, sticky="e"); ttk.Entry(grid2, textvariable=self.fps, width=6).grid(row=0, column=1, sticky="w")
        ttk.Label(grid2, text="Size (WxH):").grid(row=0, column=2, sticky="e"); ttk.Entry(grid2, textvariable=self.size, width=10).grid(row=0, column=3, sticky="w")
        ttk.Label(grid2, text="Seed:").grid(row=0, column=4, sticky="e"); ttk.Entry(grid2, textvariable=self.seed, width=10).grid(row=0, column=5, sticky="w")
        ttk.Label(grid2, text="Speed boost:").grid(row=1, column=0, sticky="e"); ttk.Entry(grid2, textvariable=self.speed_boost, width=6).grid(row=1, column=1, sticky="w")
        ttk.Label(grid2, text="Trail length:").grid(row=1, column=2, sticky="e"); ttk.Entry(grid2, textvariable=self.trail_length, width=8).grid(row=1, column=3, sticky="w")
        ttk.Label(grid2, text="Bey size scale:").grid(row=1, column=4, sticky="e"); ttk.Entry(grid2, textvariable=self.bey_size_scale, width=6).grid(row=1, column=5, sticky="w")
        row += 1

        # Buttons
        btns = ttk.Frame(frm)
        btns.grid(row=row, column=0, columnspan=4, pady=10)
        ttk.Button(btns, text="Launch", command=self._launch).grid(row=0, column=0, padx=6)
        ttk.Button(btns, text="Reload combos", command=self._load_combos).grid(row=0, column=1, padx=6)

        for i in range(4):
            frm.columnconfigure(i, weight=1)

    def _pick_parts(self):
        p = filedialog.askopenfilename(title="Select parts.json", filetypes=[("JSON","*.json")])
        if p:
            self.parts_path.set(p)

    def _pick_combos(self):
        p = filedialog.askopenfilename(title="Select combos.json", filetypes=[("JSON","*.json")])
        if p:
            self.combos_path.set(p)
            self._load_combos()

    def _pick_preset(self):
        p = filedialog.askopenfilename(title="Select preset JSON", filetypes=[("JSON","*.json")])
        if p:
            self.preset_json.set(p)

    def _load_combos(self):
        try:
            reg = PartRegistry.from_json(self.parts_path.get())
            if Path(self.combos_path.get()).exists():
                combos = load_combos(self.combos_path.get(), reg)
                names = sorted(combos.keys())
                self.combo1_box["values"] = names
                self.combo2_box["values"] = names
                if names:
                    self.combo1.set(names[0])
                    self.combo2.set(names[1 if len(names) > 1 else 0])
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load combos: {e}")

    def _launch(self):
        # Build command
        mode = self.mode.get()
        mod = "beyblade_sim.visual_rt" if mode == "2D" else "beyblade_sim.visual_3d"
        cmd = [sys.executable, "-m", mod, "--combos", self.combos_path.get(), "--combo1", self.combo1.get(), "--combo2", self.combo2.get(), "--fps", self.fps.get(), "--size", self.size.get()]
        if self.seed.get():
            cmd += ["--seed", self.seed.get()]
        if self.no_ko.get():
            cmd += ["--no-ko"]
        if self.charge_launch.get() and mode == "2D":
            cmd += ["--charge-launch"]
        if self.preset.get():
            cmd += ["--preset", self.preset.get()]
        if self.preset_json.get():
            cmd += ["--preset-json", self.preset_json.get()]
        if self.speed_boost.get():
            cmd += ["--speed-boost", self.speed_boost.get()]
        if self.trail_length.get():
            cmd += ["--trail-length", self.trail_length.get()]
        if self.bey_size_scale.get():
            cmd += ["--bey-size-scale", self.bey_size_scale.get()]

        try:
            subprocess.Popen(cmd)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to launch viewer:\n{e}")


def main(argv: list[str] | None = None) -> int:
    parser = argparse.ArgumentParser(description="MFL Simulator GUI")
    _ = parser.parse_args(argv)
    app = ControlPanel()
    app.mainloop()
    return 0


if __name__ == "__main__":
    raise SystemExit(main())

